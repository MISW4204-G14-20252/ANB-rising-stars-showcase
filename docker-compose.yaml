version: "3.9"

services:
  db:
    image: postgres:17.4
    container_name: postgres_anb_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: ANB
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_anb
    networks:
      - backend
    ports:
      - "6379:6379"

  app:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: anb_fastapi_back
    networks:
      - backend
    expose:
      - "80"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure:5
    environment:
      DATABASE_URL: postgresql://postgres:root@db:5432/ANB
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./videos/unprocessed-videos:/app/videos/unprocessed-videos
      - ./videos/processed-videos:/app/videos/processed-videos

  worker:
    build:
      context: .
      dockerfile: ./Dockerfile.worker
    container_name: anb_celery_worker
    ports:
      - "9000:9000"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: on-failure:5
    environment:
      DATABASE_URL: postgresql://postgres:root@db:5432/ANB
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./videos/unprocessed-videos:/app/videos/unprocessed-videos
      - ./videos/processed-videos:/app/videos/processed-videos

  nginx:
    image: nginx:latest
    container_name: anb_nginx_proxy
    depends_on:
      - app
    ports:
      - "80:80"
    networks:
      - backend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped

networks:
  backend:
    driver: bridge

volumes:
  pg-data:
    driver: local