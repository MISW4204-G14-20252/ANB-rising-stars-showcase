{
	"info": {
		"_postman_id": "ab97c6ca-a45f-4714-9dff-9cf29ccc2f85",
		"name": "ANB-Rising-stars",
		"description": "# 🏀 ANB Rising Stars – Documentación de Pruebas API\n\n## 📘 Contexto del Proyecto\n\nLa **Asociación Nacional de Baloncesto (ANB)** busca descubrir nuevos talentos a través del programa **Rising Stars Showcase**, donde jugadores aficionados suben videos cortos demostrando sus habilidades.  \nEsta colección Postman contiene **pruebas automáticas** para validar el correcto funcionamiento de la API de usuarios y videos de la plataforma.\n\nIncluye:\n\n- Registro y autenticación de usuarios.\n    \n- Subida y consulta de videos.\n    \n- Validaciones de errores y respuestas esperadas.\n    \n\n---\n\n## ⚙️ Variables Globales\n\n| Variable | Descripción | Ejemplo |\n| --- | --- | --- |\n| `baseUrl` | URL base del servidor | `http://localhost:8000/api` |\n| `EMAIL` | Generada dinámicamente para cada prueba de registro | `user_1729278210_1234@test.com` |\n| `PASSWORD` | Contraseña generada para cada usuario de prueba | `pw_1729278210_1234` |\n| `TOKEN` | Token JWT obtenido tras login exitoso | `eyJhbGciOi...` |\n| `VIDEO_ID` | ID del video subido (task_id) | `16` |\n\n---\n\n## 🧍‍♂️ Módulo de Usuarios (`UserTest`)\n\n### 1\\. Registrar usuario en el sistema\n\n**POST** `{{baseUrl}}/auth/signup`\n\n#### 🔹 Request Body\n\n``` json\n{\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email\": \"{{EMAIL}}\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\",\n  \"password1\": \"{{PASSWORD}}\",\n  \"password2\": \"{{PASSWORD}}\"\n}\n\n ```\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 201 en registro exitoso\", function () {\n    pm.response.to.have.status(201);\n});\n\n ```\n\n#### ✅ Resultado esperado\n\n- Código HTTP **201**\n    \n- Usuario creado correctamente.\n    \n\n---\n\n### 2\\. Registrar usuario inválido\n\n**POST** `{{baseUrl}}/auth/signup`\n\n#### 🔹 Request Body\n\n``` json\n{\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"email\": \"test@email.com\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\",\n  \"password1\": \"{{PASSWORD}}\",\n  \"password2\": \"{{PASSWORD}}2\"\n}\n\n ```\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 400 en registro, Bad request\", function () {\n    pm.response.to.have.status(400);\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código HTTP **400**\n    \n- Error por credenciales invalidas.\n    \n\n---\n\n### 3\\. Login de usuario válido\n\n**POST** `{{baseUrl}}/auth/login`\n\n#### 🔹 Request Body\n\n``` json\n{\n  \"email\": \"{{EMAIL}}\",\n  \"password\": \"{{PASSWORD}}\"\n}\n\n ```\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 200 en login exitoso\", function () {\n    pm.response.to.have.status(200);\n});\npm.test(\"Debe devolver un token JWT válido\", function () {\n    const json = pm.response.json();\n    pm.expect(json).to.have.property(\"access_token\");\n    pm.environment.set(\"TOKEN\", json.access_token);\n});\n\n ```\n\n#### ✅ Resultado esperado\n\n- Código HTTP **200**\n    \n- Retorna un `access_token` JWT.\n    \n\n---\n\n### 4\\. Login de usuario inválido\n\n**POST** `{{baseUrl}}/auth/login`\n\n#### 🔹 Request Body\n\n``` json\n{\n  \"email\": \"{{EMAIL}}-5\",\n  \"password\": \"{{PASSWORD}}-5\"\n}\n\n ```\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 401 en login, credenciales invalidas\", function () {\n    pm.response.to.have.status(401);\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código HTTP **401**\n    \n- Error de autenticación.\n    \n\n---\n\n# 🎥 Módulo de Videos (`VideoTest`)\n\nEste módulo contiene las pruebas automáticas para verificar el correcto funcionamiento de los endpoints de gestión de videos en la plataforma ANB Rising Stars.  \nIncluye casos positivos (flujos esperados) y negativos (errores y validaciones).\n\n---\n\n### 1\\. Subir video a la plataforma\n\n**POST** `{{baseUrl}}/videos/upload`  \n🔐 Requiere `Authorization: Bearer {{TOKEN}}`\n\n#### 🔹 Body (form-data)\n\n| Key | Type | Value |\n| --- | --- | --- |\n| `title` | text | `Video de prueba` |\n| `video_file` | file | `{{VIDEO_PATH}}` |\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 201 en subida exitosa\", function () {\n    pm.response.to.have.status(201);\n});\npm.test(\"La respuesta debe ser JSON válido\", function () {\n    pm.response.to.be.withBody;\n    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\nconst json = pm.response.json();\npm.test(\"Debe incluir un task_id numérico\", function () {\n    pm.expect(json).to.have.property(\"task_id\");\n    pm.expect(json.task_id).to.be.a(\"number\");\n});\npm.test(\"Debe incluir un mensaje descriptivo\", function () {\n    pm.expect(json).to.have.property(\"message\");\n    pm.expect(json.message).to.include(\"Video\");\n});\n// Guardar VIDEO_ID para las siguientes pruebas\nif (json.task_id) {\n    pm.environment.set(\"VIDEO_ID\", String(json.task_id));\n    pm.globals.set(\"VIDEO_ID\", String(json.task_id));\n}\npm.test(\"El tiempo de respuesta debe ser menor a 3s\", function () {\n    pm.expect(pm.response.responseTime).to.be.below(3000);\n});\n\n ```\n\n#### ✅ Resultado esperado\n\n- Código **201**\n    \n- Respuesta JSON con `message` y `task_id`.\n    \n- Guarda `VIDEO_ID` en entorno para próximos tests.\n    \n\n---\n\n### 2\\. Subir video inválido a la plataforma\n\n**POST** `{{baseUrl}}/videos/upload`  \n🔐 Requiere `Authorization: Bearer {{TOKEN}}`\n\n#### 🔹 Body (form-data)\n\n| Key | Type | Value |\n| --- | --- | --- |\n| `title` | text | `Video formato inválido` |\n| `video_file` | file | `./videos/test-videos/video_test_invalid.avi` |\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 400 cuando el formato no es MP4\", function () {\n    pm.response.to.have.status(400);\n});\nconst json = pm.response.json();\npm.test(\"Debe incluir mensaje de error sobre formato\", function () {\n    pm.expect(json).to.have.property(\"detail\");\n    pm.expect(String(json.detail).toLowerCase()).to.include(\"mp4\");\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código **400**\n    \n- Mensaje: `\"Solo se permiten archivos MP4\"` o similar.\n    \n\n---\n\n### 3\\. Subir video sin autenticación\n\n**POST** `{{baseUrl}}/videos/upload`  \n🔓 No requiere token (simula usuario no autenticado)\n\n#### 🔹 Body (form-data)\n\n| Key | Type | Value |\n| --- | --- | --- |\n| `title` | text | `Video sin token` |\n| `video_file` | file | `{{VIDEO_PATH}}` |\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 401 al intentar subir sin token\", function () {\n    pm.response.to.have.status(401);\n});\nlet json = {};\ntry { json = pm.response.json(); } catch(e){}\npm.test(\"Debe incluir mensaje de error\", function () {\n    pm.expect(json).to.be.an(\"object\");\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código **401**\n    \n- Error de autenticación (sin credenciales).\n    \n\n---\n\n### 4\\. Obtener todos mis videos\n\n**GET** `{{baseUrl}}/videos/`  \n🔐 Requiere `Authorization: Bearer {{TOKEN}}`\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 200 al obtener los videos\", function () {\n    pm.response.to.have.status(200);\n});\nconst json = pm.response.json();\npm.test(\"Debe responder con un arreglo de videos\", function () {\n    pm.expect(Array.isArray(json) || Array.isArray(json.results)).to.be.true;\n});\nconst items = Array.isArray(json) ? json : (json.results || []);\nif (items.length > 0) {\n    pm.test(\"Cada video debe tener id y title\", function () {\n        pm.expect(items[0]).to.have.property(\"id\");\n        pm.expect(items[0]).to.have.property(\"title\");\n    });\n}\n\n ```\n\n#### ✅ Resultado esperado\n\n- Código **200**\n    \n- Devuelve lista de videos subidos por el usuario autenticado.\n    \n\n---\n\n### 5\\. Obtener videos sin login (token inválido)\n\n**GET** `{{baseUrl}}/videos/`  \n🔓 Se usa token incorrecto `\"invalid-token\"`\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 401 al no tener autenticación\", function () {\n    pm.response.to.have.status(401);\n});\nlet err = {};\ntry { err = pm.response.json(); } catch(e){}\npm.test(\"Debe devolver mensaje de error\", function () {\n    pm.expect(err).to.be.an(\"object\");\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código **401**\n    \n- Error de autenticación (token inválido o ausente).\n    \n\n---\n\n### 6\\. Obtener detalles de un video\n\n**GET** `{{baseUrl}}/videos/{{VIDEO_ID}}`  \n🔐 Requiere `Authorization: Bearer {{TOKEN}}`\n\n> En caso de no tener un `VIDEO_ID` guardado, se puede usar un ID fijo (ej. `7`) para pruebas. \n  \n\n#### 🔹 Tests ejecutados\n\n``` javascript\nconst vid = pm.environment.get(\"VIDEO_ID\");\npm.test(\"Debe devolver 200 al obtener detalles\", function () {\n    pm.response.to.have.status(200);\n});\nconst json = pm.response.json();\npm.test(\"Debe incluir los campos mínimos esperados\", function () {\n    pm.expect(json).to.be.an(\"object\");\n    pm.expect(json).to.have.property(\"id\");\n    pm.expect(json).to.have.property(\"title\");\n    pm.expect(json).to.have.property(\"owner_id\");\n});\nif (json.status) {\n    pm.test(\"Status de procesamiento válido\", function () {\n        pm.expect([\"processing\", \"ready\", \"failed\"]).to.include(String(json.status).toLowerCase());\n    });\n}\n\n ```\n\n#### ✅ Resultado esperado\n\n- Código **200**\n    \n- JSON con los campos `id`, `title`, `owner_id` y opcionalmente `status`.\n    \n\n---\n\n### 7\\. Obtener detalles de un video inexistente\n\n**GET** `{{baseUrl}}/videos/999999`  \n🔐 Requiere `Authorization: Bearer {{TOKEN}}`\n\n#### 🔹 Tests ejecutados\n\n``` javascript\npm.test(\"Debe devolver 404 si el video no existe\", function () {\n    pm.response.to.have.status(404);\n});\npm.test(\"Debe devolver mensaje de error\", function () {\n    let json = {};\n    try { json = pm.response.json(); } catch(e){}\n    pm.expect(json).to.be.an(\"object\");\n});\n\n ```\n\n#### ❌ Resultado esperado\n\n- Código **404**\n    \n- Mensaje indicando que el video no fue encontrado.\n    \n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17339538"
	},
	"item": [
		{
			"name": "UserTest",
			"item": [
				{
					"name": "Registrar usuario en el sistema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debe devolver 201 en registro exitoso\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique email and password before sending the request",
									"const timestamp = Date.now();",
									"const random = Math.floor(Math.random() * 10000);",
									"const email = `user_${timestamp}_${random}@test.com`;",
									"const password = `pw_${timestamp}_${random}`;",
									"pm.environment.set(\"EMAIL\", email);",
									"pm.environment.set(\"PASSWORD\", password);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Test\",\r\n  \"last_name\": \"User\",\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"city\": \"Bogotá\",\r\n  \"country\": \"Colombia\",\r\n  \"password1\": \"{{PASSWORD}}\",\r\n  \"password2\": \"{{PASSWORD}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registrar usuario invalido en el sistema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debe devolver 400 en registro, Bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"Test\",\r\n  \"last_name\": \"User\",\r\n  \"email\": \"test@email.com\",\r\n  \"city\": \"Bogotá\",\r\n  \"country\": \"Colombia\",\r\n  \"password1\": \"{{PASSWORD}}\",\r\n  \"password2\": \"{{PASSWORD}}2\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logear usuario en el sistema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debe devolver 200 en login exitoso\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Debe devolver un token JWT válido\", function () {\r",
									"    const json = pm.response.json();\r",
									"    pm.expect(json).to.have.property(\"access_token\");\r",
									"    pm.environment.set(\"TOKEN\", json.access_token);\r",
									"    console.log(\"Token guardado:\", json.access_token);\r",
									"});\r",
									"\r",
									"var data = pm.response.json()\r",
									"pm.globals.set(\"TOKEN\", data.access_token);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logear un usuario invalido en el sistema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Debe devolver 401 en login, credenciales invalidas\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{EMAIL}}-5\",\r\n  \"password\": \"{{PASSWORD}}-5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "VideoTest",
			"item": [
				{
					"name": "Subir videos",
					"item": [
						{
							"name": "Subir video a la plataforma",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 201 en la subida\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"if (response.task_id) {\r",
											"    pm.globals.set(\"VIDEO_ID\", response.task_id);\r",
											"    console.log(\"Video ID guardado:\", response.task_id);\r",
											"} else {\r",
											"    console.warn(\"No se encontró task_id en la respuesta\");\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Video de prueba",
											"type": "text"
										},
										{
											"key": "video_file",
											"type": "file",
											"src": "/D:/Importante/Estudio/2025-2/CLOUD/Repositorio/ANB-rising-stars-showcase/videos/test-videos/video_test_ok.mp4"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8000/api/videos/upload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"videos",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subir video invalido a la plataforma",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 400 en la subida\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Video de prueba",
											"type": "text"
										},
										{
											"key": "video_file",
											"type": "file",
											"src": "/D:/Importante/Estudio/2025-2/CLOUD/Repositorio/ANB-rising-stars-showcase/videos/test-videos/video_test_fail.mp4"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8000/api/videos/upload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"videos",
										"upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subir video a la plataforma sin login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 401 en la subida\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "\"token-invalido\"",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Video de prueba",
											"type": "text"
										},
										{
											"key": "video_file",
											"type": "file",
											"src": "/D:/Importante/Estudio/2025-2/CLOUD/Repositorio/ANB-rising-stars-showcase/videos/test-videos/video_test_ok.mp4"
										}
									]
								},
								"url": {
									"raw": "http://localhost:8000/api/videos/upload",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"videos",
										"upload"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Obtener videos",
					"item": [
						{
							"name": "Obtener videos sin login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 401 en la obtencion de video\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "\"invalid-token\"",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/videos/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"videos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener todos mis videos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Debe devolver 200 al obtener los videos\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/videos/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"videos",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Obtener un video",
					"item": [
						{
							"name": "Obtener detalles de un video",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/videos/7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"videos",
										"7"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": ""
		}
	]
}